------CLASSES------
org.datavec.api.transform.schema.Schema.Builder
org.datavec.api.records.reader.RecordReader
org.datavec.api.records.reader.impl.csv.CSVRecordReader
org.datavec.api.transform.TransformProcess
org.datavec.api.transform.TransformProcess.Builder
org.datavec.api.writable.Writable
org.datavec.api.split.FileSplit
org.datavec.api.transform.schema.Schema
------END OF CLASSES------
------API CALLS------
org.datavec.api.transform.TransformProcess.Builder.categoricalToInteger(java.lang.String...)
org.datavec.api.transform.TransformProcess.Builder.build()
org.datavec.api.transform.schema.Schema.Builder.build()
org.datavec.api.records.reader.RecordReader.next()
org.datavec.api.transform.schema.Schema.Builder.addColumnCategorical(java.lang.String, java.lang.String...)
org.datavec.local.transforms.LocalTransformExecutor.execute(java.util.List<java.util.List<org.datavec.api.writable.Writable>>, org.datavec.api.transform.TransformProcess)
org.datavec.api.transform.schema.Schema.Builder.addColumnsDouble(java.lang.String...)
org.datavec.api.records.reader.RecordReader.hasNext()
org.datavec.api.records.reader.RecordReader.initialize(org.datavec.api.split.InputSplit)
------END OF API CALLS------
------CONSTRUCTORS------
org.datavec.api.records.reader.impl.csv.CSVRecordReader.CSVRecordReader()
org.datavec.api.transform.TransformProcess.Builder.TransformProcess$Builder(org.datavec.api.transform.schema.Schema)
org.datavec.api.transform.schema.Schema.Builder.Schema$Builder()
org.datavec.api.split.FileSplit.FileSplit(java.io.File)
------END OF CONSTRUCTORS------
