------CLASSES------
org.deeplearning4j.util.ModelSerializer
org.nd4j.linalg.dataset.api.iterator.DataSetIterator
org.deeplearning4j.optimize.listeners.EvaluativeListener
java.lang.Integer
org.deeplearning4j.nn.conf.layers.DenseLayer
org.nd4j.linalg.learning.config.Sgd
org.deeplearning4j.nn.conf.layers.BatchNormalization
org.deeplearning4j.nn.conf.layers.GlobalPoolingLayer
org.nd4j.linalg.schedule.ISchedule
java.util.List<Record>
org.deeplearning4j.optimize.api.IterationListener
org.deeplearning4j.nn.weights.WeightInit
org.nd4j.linalg.learning.AdamUpdater
org.deeplearning4j.nn.conf.layers.DenseLayer.Builder
org.nd4j.linalg.factory.Nd4j
org.datavec.api.io.filters.PathFilter
org.nd4j.linalg.learning.AdaDeltaUpdater
org.nd4j.linalg.learning.config.AMSGrad
org.deeplearning4j.optimize.api.TrainingListener
org.nd4j.linalg.learning.RmsPropUpdater
org.deeplearning4j.nn.conf.layers.Layer
org.datavec.api.records.Record
org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder
org.nd4j.linalg.learning.config.Nadam
java.lang.Double
org.nd4j.linalg.dataset.api.DataSet
org.datavec.api.records.metadata.RecordMetaData
org.nd4j.linalg.dataset.api.preprocessor.NormalizerMinMaxScaler
org.datavec.api.transform.TransformProcess.Builder
org.nd4j.linalg.learning.NoOpUpdater
org.deeplearning4j.nn.conf.layers.SubsamplingLayer
org.nd4j.linalg.learning.config.IUpdater
org.deeplearning4j.nn.conf.layers.FeedForwardLayer
org.datavec.api.records.reader.impl.csv.CSVRecordReader
org.deeplearning4j.nn.conf.layers.BatchNormalization.Builder
org.nd4j.linalg.schedule.MapSchedule
java.util.Collection<URI>
org.deeplearning4j.nn.conf.MultilayerConfiguration
org.nd4j.linalg.lossfunctions.LossFunctions.LossFunction
java.util.Iterator<URI>
org.nd4j.linalg.activations.Activation
org.nd4j.linalg.learning.NesterovsUpdater
org.nd4j.eval.RegressionEvaluation
org.nd4j.linalg.learning.NadamUpdater
org.deeplearning4j.nn.conf.layers.OutputLayer.Builder
org.nd4j.linalg.learning.config.NoOp
org.datavec.api.writable.Writable
java.io.File
org.deeplearning4j.nn.multilayer.MultiLayerNetwork
org.deeplearning4j.nn.layers.BaseOutputLayer<>
org.deeplearning4j.nn.conf.inputs.InputType
org.deeplearning4j.nn.conf.MultiLayerConfiguration
org.nd4j.linalg.api.ndarray.INDArray
org.datavec.api.split.NumberedFileInputSplit
org.datavec.api.transform.TransformProcess
org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator
org.nd4j.linalg.learning.config.Nesterovs
org.nd4j.linalg.learning.config.Adam
org.nd4j.linalg.learning.AdaGradUpdater
org.nd4j.linalg.dataset.api.preprocessor.Normalizer
org.datavec.api.split.CollectionInputSplit
org.deeplearning4j.nn.conf.layers.ConvolutionLayer
org.datavec.api.records.reader.RecordReader
org.datavec.api.conf.Configuration
org.nd4j.linalg.dataset.api.preprocessor.DataNormalization
java.util.Random
org.deeplearning4j.nn.conf.layers.OutputLayer
org.deeplearning4j.nn.layers.BaseLayer<>
java.net.URI
org.deeplearning4j.nn.conf.NeuralNetConfiguration.ListBuilder
org.nd4j.linalg.dataset.api.preprocessor.NormalizerStandardize
org.nd4j.linalg.learning.config.AdaGrad
org.nd4j.linalg.dataset.DataSet
org.deeplearning4j.optimize.listeners.ScoreIterationListener
org.deeplearning4j.nn.conf.layers.GlobalPoolingLayer.Builder
org.nd4j.linalg.lossfunctions.impl.LossMCXENT
org.nd4j.evaluation.classification.Evaluation
org.datavec.api.transform.schema.Schema.Builder
org.nd4j.linalg.learning.AMSGradUpdater
java.util.Map<Integer,Double>
org.datavec.api.split.InputSplit
java.util.List<RecordMetaData>
org.deeplearning4j.nn.conf.layers.FeedForwardLayer.Builder
org.datavec.api.transform.schema.Schema
org.deeplearning4j.optimize.api.BaseTrainingListener
java.util.List<Writable>
org.deeplearning4j.nn.api.Model
org.deeplearning4j.nn.api.OptimizationAlgo
org.deeplearning4j.nn.conf.layers.BaseLayer.Builder
org.nd4j.linalg.learning.config.AdaDelta
org.nd4j.linalg.schedule.StepSchedule
org.nd4j.linalg.lossfunctions.ILossFunction
org.nd4j.linalg.learning.config.RmsProp
org.nd4j.linalg.dataset.SplitTestAndTrain
org.deeplearning4j.nn.conf.NeuralNetConfiguration.Builder
org.nd4j.linalg.learning.SgdUpdater
org.datavec.api.split.FileSplit
org.deeplearning4j.nn.conf.NeuralNetConfiguration
org.datavec.api.transform.condition.Condition
org.deeplearning4j.nn.conf.layers.SubsamplingLayer.Builder
------END OF CLASSES------
------API CALLS------
org.datavec.api.split.FileSplit.locations()
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.fit(org.nd4j.linalg.dataset.api.DataSet)
org.deeplearning4j.nn.conf.layers.OutputLayer.Builder.build()
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.output(org.nd4j.linalg.dataset.api.iterator.DataSetIterator)
org.deeplearning4j.nn.conf.layers.BaseLayer.Builder.updater(org.nd4j.linalg.learning.config.IUpdater)
org.datavec.api.transform.TransformProcess.Builder.integerToCategorical(java.lang.String, java.lang.String...)
org.datavec.api.records.reader.RecordReader.loadFromMetaData(java.util.List)
java.util.Iterator<URI>.next()
org.deeplearning4j.nn.conf.layers.FeedForwardLayer.Builder.nOut(long)
org.deeplearning4j.nn.conf.NeuralNetConfiguration.Builder.weightInit(org.deeplearning4j.nn.weights.WeightInit)
org.datavec.api.records.reader.RecordReader.initialize(org.datavec.api.split.InputSplit)
org.nd4j.linalg.dataset.api.preprocessor.Normalizer.fit(T)
org.nd4j.linalg.dataset.DataSet.shuffle()
org.datavec.api.transform.schema.Schema.Builder.addColumnInteger(java.lang.String, int, int)
org.datavec.api.transform.schema.Schema.Builder.addColumnsString(java.lang.String...)
org.deeplearning4j.nn.conf.layers.FeedForwardLayer.Builder.nIn(long)
org.deeplearning4j.util.ModelSerializer.writeModel(org.deeplearning4j.nn.api.Model, java.lang.String, boolean)
org.nd4j.linalg.factory.Nd4j.hstack(org.nd4j.linalg.api.ndarray.INDArray...)
org.nd4j.linalg.factory.Nd4j.vstack(org.nd4j.linalg.api.ndarray.INDArray...)
org.datavec.api.split.CollectionInputSplit.locationsIterator()
org.datavec.api.transform.TransformProcess.Builder.build()
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.output(org.nd4j.linalg.dataset.api.iterator.DataSetIterator, boolean)
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.fit(org.nd4j.linalg.dataset.api.iterator.DataSetIterator)
org.nd4j.linalg.dataset.DataSet.splitTestAndTrain(int)
org.nd4j.linalg.factory.Nd4j.create(double[][])
org.deeplearning4j.nn.conf.layers.BaseLayer.Builder.l1(double)
org.datavec.api.records.reader.RecordReader.initialize(org.datavec.api.conf.Configuration, org.datavec.api.split.InputSplit)
org.nd4j.linalg.factory.Nd4j.create(double[][][])
org.datavec.api.transform.TransformProcess.Builder.conditionalCopyValueTransform(java.lang.String, java.lang.String, org.datavec.api.transform.condition.Condition)
org.datavec.api.transform.schema.Schema.Builder.addColumnsDouble(java.lang.String...)
org.nd4j.linalg.factory.Nd4j.create(int[][])
org.deeplearning4j.nn.conf.inputs.InputType.convolutional(long, long, long)
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.output(org.nd4j.linalg.api.ndarray.INDArray)
org.datavec.api.transform.TransformProcess.Builder.categoricalToInteger(java.lang.String...)
org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder.nIn(int)
org.nd4j.linalg.dataset.api.iterator.DataSetIterator.hasNext()
org.deeplearning4j.nn.conf.layers.GlobalPoolingLayer.Builder.poolingType(org.deeplearning4j.nn.conf.layers.PoolingType)
org.deeplearning4j.nn.conf.inputs.InputType.convolutionalFlat(long, long, long)
org.deeplearning4j.nn.conf.layers.BaseLayer.Builder.activation(org.nd4j.linalg.activations.Activation)
org.nd4j.linalg.factory.Nd4j.create(int[])
org.deeplearning4j.nn.conf.layers.DenseLayer.Builder.nInt(int)
org.deeplearning4j.nn.conf.layers.GlobalPoolingLayer.Builder.poolingDimensions(int...)
org.nd4j.linalg.factory.Nd4j.vstack(int...)
org.nd4j.linalg.dataset.api.preprocessor.NormalizerStandardize.transform(org.nd4j.linalg.dataset.api.DataSet)
org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder.stride(int...)
org.nd4j.linalg.factory.Nd4j.create(double[])
org.deeplearning4j.nn.conf.inputs.InputType.convolutional3D(int, int, int, int)
org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder.padding(int...)
org.deeplearning4j.nn.conf.layers.SubsamplingLayer.Builder.stride(int...)
org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder.nOut(int)
org.datavec.api.transform.TransformProcess.Builder.conditionalReplaceValueTransform(java.lang.String, org.datavec.api.writable.Writable, org.datavec.api.transform.condition.Condition)
org.nd4j.linalg.dataset.DataSet.splitTestAndTrain(double)
org.deeplearning4j.nn.conf.layers.SubsamplingLayer.Builder.padding(int...)
org.nd4j.linalg.dataset.SplitTestAndTrain.getTest()
org.nd4j.linalg.dataset.api.iterator.DataSetIterator.next(int)
org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator.setCollectMetaData(boolean)
org.deeplearning4j.nn.conf.layers.SubsamplingLayer.Builder.build()
org.deeplearning4j.nn.conf.layers.OutputLayer.Builder.dropOut(double)
org.deeplearning4j.nn.conf.layers.BaseLayer.Builder.l2(double)
org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator.next()
org.datavec.api.transform.TransformProcess.Builder.stringToTimeTransform(java.lang.String, java.lang.String, int)
org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder.kernalSize(int...)
org.datavec.api.split.FileSplit.sample(org.datavec.api.io.filters.PathFilter, double[])
org.nd4j.linalg.dataset.api.iterator.DataSetIterator.reset()
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.evaluateRegression(org.nd4j.linalg.dataset.api.iterator.DataSetIterator)
org.nd4j.linalg.factory.Nd4j.create(float[])
org.deeplearning4j.nn.conf.inputs.InputType.feedForward(long)
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.fit(org.nd4j.linalg.api.ndarray.INDArray, org.nd4j.linalg.api.ndarray.INDArray)
org.nd4j.linalg.factory.Nd4j.create(float[][])
org.datavec.api.split.FileSplit.locationsIterator()
org.deeplearning4j.nn.conf.layers.SubsamplingLayer.Builder.kernelSize(int...)
org.nd4j.linalg.factory.Nd4j.hstack(int...)
org.deeplearning4j.nn.conf.NeuralNetConfiguration.Builder.activation(org.nd4j.linalg.activations.Activation)
org.datavec.api.transform.TransformProcess.Builder.stringToCategorical(java.lang.String,java.util.List<java.lang.String>)
org.deeplearning4j.nn.conf.NeuralNetConfiguration.Builder.updater(org.nd4j.linalg.learning.config.IUpdater)
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.init()
org.nd4j.evaluation.classification.Evaluation.eval(int, int)
org.nd4j.linalg.factory.Nd4j.create(int[][][])
org.deeplearning4j.nn.conf.layers.OutputLayer.Builder.nOut(int)
org.deeplearning4j.nn.conf.layers.DenseLayer.Builder.build()
org.datavec.api.transform.schema.Schema.Builder.addColumnInteger(java.lang.String)
org.nd4j.linalg.dataset.DataSet.shuffle(long)
org.nd4j.linalg.dataset.DataSet.getLabels()
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.save(java.io.File, boolean)
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.output(org.nd4j.linalg.api.ndarray.INDArray, boolean)
org.deeplearning4j.nn.conf.inputs.InputType.feedForward(int)
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.setListeners(org.deeplearning4j.optimize.api.TrainingListener...)
org.deeplearning4j.nn.conf.layers.OutputLayer.Builder.activation(org.nd4j.linalg.activations.Activation)
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.evaluate(org.nd4j.linalg.dataset.api.iterator.DataSetIterator)
org.nd4j.evaluation.classification.Evaluation.stats()
org.deeplearning4j.nn.conf.inputs.InputType.convolutional(int, int, int)
org.datavec.api.transform.TransformProcess.Builder.categoricalToOneHot(java.lang.String...)
org.deeplearning4j.nn.conf.layers.GlobalPoolingLayer.Builder.build()
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.fit(org.nd4j.linalg.dataset.api.iterator.DataSetIterator, int)
org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder.build()
org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder.activation(int)
org.deeplearning4j.nn.conf.inputs.InputType.convolutionalFlat(int, int, int)
org.datavec.api.transform.schema.Schema.Builder.addColumnDouble(java.lang.String, double, double)
org.nd4j.linalg.dataset.api.preprocessor.NormalizerStandardize.fit(org.nd4j.linalg.dataset.api.iterator.DataSetIterator)
java.util.Iterator<URI>.hasNext()
org.datavec.api.transform.schema.Schema.Builder.addColumnLong(java.lang.String)
org.datavec.api.records.reader.impl.csv.CSVRecordReader.next()
org.datavec.api.transform.schema.Schema.Builder.addColumnString(java.lang.String)
org.nd4j.linalg.dataset.SplitTestAndTrain.getTrain()
org.nd4j.evaluation.classification.Evaluation.eval(org.nd4j.linalg.api.ndarray.INDArray, org.nd4j.linalg.api.ndarray.INDArray)
org.deeplearning4j.nn.conf.layers.FeedForwardLayer.Builder.nIn(int)
org.deeplearning4j.nn.conf.NeuralNetConfiguration.ListBuilder.build()
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.save(java.io.File)
org.datavec.api.transform.schema.Schema.Builder.addColumnDouble(java.lang.String)
org.deeplearning4j.nn.conf.NeuralNetConfiguration.ListBuilder.layer(org.deeplearning4j.nn.conf.layers.Layer)
org.nd4j.evaluation.classification.Evaluation.confusionToString()
org.deeplearning4j.nn.conf.NeuralNetConfiguration.ListBuilder.setInputType(int)
org.nd4j.eval.RegressionEvaluation.stats()
org.datavec.api.transform.schema.Schema.Builder.addColumnsInteger(java.lang.String...)
org.deeplearning4j.nn.conf.layers.FeedForwardLayer.Builder.nOut(int)
org.deeplearning4j.nn.conf.layers.DenseLayer.Builder.nIn(long)
org.nd4j.linalg.dataset.api.preprocessor.Normalizer.transform(T)
org.datavec.api.transform.schema.Schema.Builder.addColumnDouble(java.lang.String, double, double, boolean, boolean)
org.datavec.api.transform.schema.Schema.Builder.addColumnLong(java.lang.String, long, long)
org.deeplearning4j.nn.conf.layers.BatchNormalization.Builder.build()
org.nd4j.linalg.dataset.DataSet.getFeatures()
org.nd4j.linalg.factory.Nd4j.create(float[][][])
org.deeplearning4j.nn.conf.NeuralNetConfiguration.Builder.learningRate(double)
org.deeplearning4j.nn.conf.inputs.InputType.convolutional3D(long, long, long, long)
org.datavec.api.split.NumberedFileInputSplit.locationsIterator()
org.deeplearning4j.nn.conf.NeuralNetConfiguration.Builder.l2(double)
org.deeplearning4j.nn.conf.layers.BaseLayer.Builder.weightInit(org.deeplearning4j.nn.weights.WeightInit)
org.deeplearning4j.nn.conf.NeuralNetConfiguration.Builder.list()
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.doEvaluation(org.nd4j.linalg.dataset.api.iterator.DataSetIterator, T...)
org.datavec.api.transform.schema.Schema.Builder.addColumnsLong(java.lang.String...)
org.deeplearning4j.nn.conf.NeuralNetConfiguration.ListBuilder.setInputType(org.deeplearning4j.nn.conf.inputs.InputType)
org.datavec.api.transform.schema.Schema.Builder.build()
org.deeplearning4j.nn.conf.NeuralNetConfiguration.Builder.miniBatch(boolean)
org.datavec.api.records.reader.RecordReader.loadFromMetaData(org.datavec.api.records.metadata.RecordMetaData)
org.nd4j.evaluation.classification.Evaluation.stats(org.nd4j.linalg.api.ndarray.INDArray, org.nd4j.linalg.api.ndarray.INDArray)
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.fit()
org.nd4j.linalg.dataset.api.preprocessor.NormalizerStandardize.transform(org.nd4j.linalg.api.ndarray.INDArray)
org.deeplearning4j.nn.conf.layers.OutputLayer.Builder.name(java.lang.String)
org.deeplearning4j.nn.conf.layers.DenseLayer.Builder.nOut(long)
org.deeplearning4j.nn.conf.NeuralNetConfiguration.Builder.optimizationAlgo(org.deeplearning4j.nn.api.OptimizationAlgo)
org.deeplearning4j.nn.conf.NeuralNetConfiguration.ListBuilder.layer(int, org.deeplearning4j.nn.conf.layers.Layer)
org.nd4j.linalg.dataset.api.preprocessor.NormalizerStandardize.fit(org.nd4j.linalg.dataset.api.DataSet)
org.datavec.api.transform.schema.Schema.Builder.addColumnFloat(java.lang.String)
org.deeplearning4j.nn.conf.layers.DenseLayer.Builder.nOut(int)
org.datavec.api.split.NumberedFileInputSplit.locations()
org.nd4j.evaluation.classification.Evaluation.confusionMatrix()
org.datavec.api.records.reader.impl.csv.CSVRecordReader.initialize(org.datavec.api.split.InputSplit)
org.datavec.api.transform.schema.Schema.Builder.addColumnCategorical(java.lang.String,java.util.List<java.lang.String>)
org.deeplearning4j.util.ModelSerializer.writeModel(org.deeplearning4j.nn.api.Model, java.io.File, boolean)
org.deeplearning4j.nn.conf.NeuralNetConfiguration.Builder.seed(long)
------END OF API CALLS------
------CONSTRUCTORS------
java.io.File.File(java.lang.String, java.lang.String)
org.datavec.api.split.FileSplit.FileSplit(java.io.File, java.lang.String[], boolean)
org.nd4j.linalg.learning.config.Nadam.Nadam(double)
org.nd4j.linalg.learning.config.Adam.Adam(double, double, double, double)
org.deeplearning4j.nn.conf.layers.OutputLayer.Builder.OutputLayer$Builder()
org.nd4j.linalg.learning.config.AMSGrad.AMSGrad(double)
org.deeplearning4j.optimize.api.IterationListener.IterationListener()
org.deeplearning4j.nn.conf.layers.SubsamplingLayer.Builder.SubsamplingLayer$Builder(int...)
org.nd4j.linalg.dataset.DataSet.DataSet(org.nd4j.linalg.api.ndarray.INDArray, org.nd4j.linalg.api.ndarray.INDArray, org.nd4j.linalg.api.ndarray.INDArray, org.nd4j.linalg.api.ndarray.INDArray)
org.nd4j.linalg.learning.config.Adam.Adam()
org.datavec.api.transform.schema.Schema.Builder.Schema$Builder()
org.datavec.api.split.FileSplit.FileSplit(java.io.File)
org.nd4j.linalg.learning.config.RmsProp.RmsProp()
org.nd4j.linalg.learning.NadamUpdater.NadamUpdater(org.nd4j.linalg.learning.config.Nadam)
org.nd4j.linalg.dataset.SplitTestAndTrain.SplitTestAndTrain(org.nd4j.linalg.dataset.DataSet, org.nd4j.linalg.dataset.DataSet)
org.deeplearning4j.nn.conf.layers.BatchNormalization.BatchNormalization()
org.nd4j.linalg.learning.config.AdaGrad.AdaGrad()
org.nd4j.linalg.dataset.api.preprocessor.NormalizerStandardize.NormalizerStandardize()
org.deeplearning4j.nn.conf.layers.GlobalPoolingLayer.Builder.GlobalPoolingLayer$Builder()
org.datavec.api.split.FileSplit.FileSplit(java.io.File, java.lang.String[], java.util.Random)
org.datavec.api.split.CollectionInputSplit.CollectionInputSplit(java.util.Collection)
org.datavec.api.split.NumberedFileInputSplit.NumberedFileInputSplit(java.lang.String, int, int)
org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder.ConvolutionLayer$Builder(int...)
org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator.RecordReaderDataSetIterator(org.datavec.api.records.reader.RecordReader, int)
org.deeplearning4j.nn.conf.layers.OutputLayer.Builder.OutputLayer$Builder(org.nd4j.linalg.lossfunctions.ILossFunction)
org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder.ConvolutionLayer$Builder()
org.deeplearning4j.nn.conf.layers.FeedForwardLayer.Builder.FeedForwardLayer$Builder()
org.nd4j.linalg.learning.SgdUpdater.SgdUpdater(org.nd4j.linalg.learning.config.Sgd)
org.nd4j.linalg.factory.Nd4j.Nd4j()
org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator.RecordReaderDataSetIterator(org.datavec.api.records.reader.RecordReader, int, int, int, int)
org.nd4j.eval.RegressionEvaluation.RegressionEvaluation(long)
java.io.File.File(java.net.URI)
org.datavec.api.records.reader.impl.csv.CSVRecordReader.CSVRecordReader(int, java.lang.String)
org.deeplearning4j.nn.conf.NeuralNetConfiguration.Builder.NeuralNetConfiguration$Builder()
org.datavec.api.split.FileSplit.FileSplit(java.io.File, java.util.Random)
java.io.File.File(java.io.File, java.lang.String)
org.nd4j.linalg.learning.AMSGradUpdater.AMSGradUpdater(org.nd4j.linalg.learning.config.AMSGrad)
org.nd4j.linalg.learning.config.Adam.Adam(org.nd4j.linalg.schedule.ISchedule)
org.nd4j.linalg.learning.config.Nadam.Nadam(double, double, double, double)
org.datavec.api.records.reader.impl.csv.CSVRecordReader.CSVRecordReader(int, char)
org.datavec.api.records.reader.impl.csv.CSVRecordReader.CSVRecordReader()
org.nd4j.linalg.learning.config.AdaDelta.AdaDelta()
org.nd4j.linalg.learning.NoOpUpdater.NoOpUpdater(org.nd4j.linalg.learning.config.NoOp)
org.nd4j.linalg.lossfunctions.impl.LossMCXENT.LossMCXENT(double, org.nd4j.linalg.api.ndarray.INDArray)
org.nd4j.linalg.dataset.api.preprocessor.NormalizerMinMaxScaler.NormalizerMinMaxScaler()
org.deeplearning4j.nn.conf.layers.BatchNormalization.Builder.BatchNormalization$Builder()
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.MultiLayerNetwork(org.deeplearning4j.nn.conf.MultiLayerConfiguration)
org.deeplearning4j.nn.conf.layers.SubsamplingLayer.Builder.SubsamplingLayer$Builder(org.deeplearning4j.nn.conf.layers.PoolingType)
org.nd4j.linalg.learning.config.Nadam.Nadam()
org.nd4j.linalg.dataset.api.preprocessor.NormalizerMinMaxScaler.NormalizerMinMaxScaler(double, double)
org.datavec.api.split.CollectionInputSplit.CollectionInputSplit(URI[])
org.nd4j.linalg.learning.config.Sgd.Sgd(double)
org.nd4j.linalg.learning.config.AMSGrad.AMSGrad(double, double, double, double)
org.deeplearning4j.optimize.listeners.EvaluativeListener.EvaluativeListener(org.nd4j.linalg.dataset.api.iterator.DataSetIterator, int, org.deeplearning4j.optimize.api.InvocationType)
org.nd4j.linalg.lossfunctions.impl.LossMCXENT.LossMCXENT(org.nd4j.linalg.api.ndarray.INDArray)
org.deeplearning4j.nn.conf.layers.DenseLayer.Builder.DenseLayer$Builder()
org.nd4j.linalg.learning.config.Nesterovs.Nesterovs(double, double)
org.deeplearning4j.optimize.listeners.ScoreIterationListener.ScoreIterationListener()
org.nd4j.linalg.learning.AdaDeltaUpdater.AdaDeltaUpdater(org.nd4j.linalg.learning.config.AdaDelta)
org.nd4j.linalg.learning.config.AdaDelta.AdaDelta(double, double)
org.nd4j.linalg.learning.config.Adam.Adam(double)
org.deeplearning4j.optimize.listeners.EvaluativeListener.EvaluativeListener(org.nd4j.linalg.dataset.api.iterator.DataSetIterator, int)
org.nd4j.eval.RegressionEvaluation.RegressionEvaluation()
org.nd4j.evaluation.classification.Evaluation.Evaluation()
org.nd4j.linalg.dataset.DataSet.DataSet()
org.datavec.api.transform.TransformProcess.Builder.TransformProcess$Builder(org.datavec.api.transform.schema.Schema)
org.nd4j.linalg.learning.config.Nesterovs.Nesterovs()
org.nd4j.linalg.lossfunctions.impl.LossMCXENT.LossMCXENT()
org.deeplearning4j.optimize.api.BaseTrainingListener.BaseTrainingListener()
org.nd4j.linalg.dataset.api.preprocessor.NormalizerStandardize.NormalizerStandardize(org.nd4j.linalg.api.ndarray.INDArray, org.nd4j.linalg.api.ndarray.INDArray)
org.nd4j.linalg.schedule.StepSchedule.StepSchedule(org.nd4j.linalg.schedule.ScheduleType, double, double, double)
org.nd4j.linalg.schedule.MapSchedule.MapSchedule(org.nd4j.linalg.schedule.ScheduleType, java.util.Map)
java.io.File.File(java.lang.String)
org.nd4j.linalg.learning.config.RmsProp.RmsProp(double)
org.nd4j.linalg.learning.config.Nesterovs.Nesterovs(double)
org.nd4j.linalg.learning.config.AdaGrad.AdaGrad(double, double)
org.deeplearning4j.optimize.listeners.ScoreIterationListener.ScoreIterationListener(int)
org.nd4j.linalg.dataset.DataSet.DataSet(org.nd4j.linalg.api.ndarray.INDArray, org.nd4j.linalg.api.ndarray.INDArray)
org.deeplearning4j.nn.multilayer.MultiLayerNetwork.MultiLayerNetwork(org.deeplearning4j.nn.conf.MultilayerConfiguration)
org.nd4j.linalg.learning.RmsPropUpdater.RmsPropUpdater(org.nd4j.linalg.learning.config.RmsProp)
org.datavec.api.split.FileSplit.FileSplit(java.io.File, java.lang.String[])
org.nd4j.linalg.learning.config.Sgd.Sgd()
org.nd4j.evaluation.classification.Evaluation.Evaluation(int)
org.nd4j.linalg.learning.config.AMSGrad.AMSGrad()
org.deeplearning4j.nn.conf.layers.OutputLayer.Builder.OutputLayer$Builder(org.nd4j.linalg.lossfunctions.LossFunctions.LossFunction)
org.nd4j.linalg.learning.config.Nesterovs.Nesterovs(org.nd4j.linalg.schedule.ISchedule)
org.nd4j.linalg.learning.config.NoOp.NoOp()
org.nd4j.linalg.learning.config.AdaGrad.AdaGrad(double)
org.nd4j.linalg.learning.config.RmsProp.RmsProp(double, double, double)
org.nd4j.linalg.learning.NesterovsUpdater.NesterovsUpdater(org.nd4j.linalg.learning.config.Nesterovs)
org.nd4j.linalg.dataset.api.preprocessor.NormalizerStandardize.NormalizerStandardize(org.nd4j.linalg.api.ndarray.INDArray, org.nd4j.linalg.api.ndarray.INDArray, org.nd4j.linalg.api.ndarray.INDArray, org.nd4j.linalg.api.ndarray.INDArray)
org.nd4j.linalg.learning.AdaGradUpdater.AdaGradUpdater(org.nd4j.linalg.learning.config.AdaGrad)
org.nd4j.linalg.learning.config.Nesterovs.Nesterovs(double, org.nd4j.linalg.schedule.ISchedule)
org.nd4j.linalg.learning.AdamUpdater.AdamUpdater(org.nd4j.linalg.learning.config.Adam)
org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator.RecordReaderDataSetIterator(org.datavec.api.records.reader.RecordReader, int, int, int, boolean)
org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator.RecordReaderDataSetIterator(org.datavec.api.records.reader.RecordReader, int, int, int)
------END OF CONSTRUCTORS------
